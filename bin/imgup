#!/usr/bin/env ruby

require 'dotenv'
Dotenv.load('.env', File.expand_path('~/.imgup.env'))

require 'optparse'
require_relative '../lib/imgup/uploader'

# 1. Set defaults
options = {
  format: 'md'     # default if user doesn't pass -f
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: imgup [options] <path/to/image>"

  opts.on("-t TITLE", "--title=TITLE", "Image title (default: filename)") do |t|
    options[:title] = t
  end

  opts.on("-c CAPTION", "--caption=CAPTION", "Image caption (optional)") do |c|
    options[:caption] = c
  end

  # 2. Restrict format to only these three values
  opts.on("-f FORMAT", "--format=FORMAT", %w[org md html],
          "Output format (org, md, html). Defaults to md.") do |fmt|
    options[:format] = fmt
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts e.message
  $stderr.puts parser
  exit 1
end

# 3. Validate positional argument
if ARGV.length != 1
  $stderr.puts parser
  exit 1
end

file = ARGV.first
unless File.file?(file)
  $stderr.puts "File not found: #{file}"
  exit 1
end

# 4. Upload + dispatch on format
begin
  result = ImgUp::Uploader.new(
    file,
    title:   options[:title],
    caption: options[:caption]
  ).call

  key = case options[:format]
        when 'org'  then :org
        when 'html' then :html
        else              # covers 'md' or anything else (shouldn't happen)
          :markdown
        end

  puts result.fetch(key)  # fetch will blow up if key is missing
rescue KeyError => e
  $stderr.puts "No snippet for format #{options[:format].inspect}"
  exit 1
rescue => e
  $stderr.puts e.message
  exit 1
end
